#!/bin/bash

# Advanced System & Network Operations Simulator
# This script simulates a wide range of complex administrative tasks, including
# network management, disk operations, code deployment, and configuration management.
# For SRE and Platform Engineering use only.

# --- Configuration ---
HOSTS=("srv-web-tm-01" "srv-db-roc3-01a" "k8s-worker-ntt-04" "ci-runner-data-02")
REPOS=("platform/api-gateway" "infra/ansible-playbooks" "services/payment-processor")
USERS=("d.ionescu" "a.popescu" "m.stoica")
IPS=("10.45.1.101" "192.168.10.5" "10.30.2.215" "172.16.31.58")
DISKS=("/dev/sdc" "/dev/sdd" "/dev/mapper/vg01-lvol02")
RAID_ARRAYS=("/dev/md0" "/dev/md1")


# --- ANSI Color Codes ---
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# --- Trap Ctrl+C for a clean exit ---
trap ctrl_c INT
function ctrl_c() {
    echo -e "\n\n${YELLOW}Session terminated by user.${NC}"
    exit 0
}

# --- Operation Functions ---

function run_ansible_op() {
    PLAYBOOK=("deploy_nginx.yml" "patch_kernel.yml" "harden_ssh.yml")
    SELECTED_PLAYBOOK=${PLAYBOOK[$RANDOM % ${#PLAYBOOK[@]}]}
    HOST=${HOSTS[$RANDOM % ${#HOSTS[@]}]}

    echo -e "${PURPLE}[ANSIBLE]${NC} Running playbook ${SELECTED_PLAYBOOK} on host: ${HOST}"
    sleep 1
    echo "ansible-playbook -i hosts -l ${HOST} playbooks/${SELECTED_PLAYBOOK}"
    echo ""
    echo -e "${PURPLE}PLAY [${SELECTED_PLAYBOOK}] ******************************************************${NC}"
    sleep 0.5
    echo -e "${CYAN}TASK [Gathering Facts] *******************************************************${NC}"
    echo -e "ok: [${HOST}]"
    sleep 1
    echo -e "${CYAN}TASK [common : Update apt cache] *******************************************${NC}"
    echo -e "${YELLOW}changed: [${HOST}]${NC}"
    sleep 1.5
    echo -e "${CYAN}TASK [nginx : Install nginx] ***********************************************${NC}"
    echo -e "${YELLOW}changed: [${HOST}]${NC}"
    sleep 1
    echo -e "${CYAN}TASK [firewall : Allow http traffic] *************************************${NC}"
    echo -e "ok: [${HOST}]"
    sleep 0.5
    echo -e "${PURPLE}PLAY RECAP *******************************************************************${NC}"
    echo -e "${HOST} : ${GREEN}ok=3${NC}    ${YELLOW}changed=2${NC}    unreachable=0    ${RED}failed=0${NC}    skipped=0    rescued=0    ignored=0"
}

function run_git_op() {
    REPO=${REPOS[$RANDOM % ${#REPOS[@]}]}
    USER=${USERS[$RANDOM % ${#USERS[@]}]}
    BRANCH=("main" "feature/roc3-billing-api" "hotfix/data-leak")
    SELECTED_BRANCH=${BRANCH[$RANDOM % ${#BRANCH[@]}]}

    echo -e "${BLUE}[GIT]${NC} Performing git operations in /srv/git/${REPO}"
    echo -e "git checkout ${SELECTED_BRANCH} && git pull origin ${SELECTED_BRANCH}"
    sleep 1
    echo "Switched to branch '${SELECTED_BRANCH}'"
    echo "Your branch is up to date with 'origin/${SELECTED_BRANCH}'."
    sleep 1
    echo -e "${YELLOW}Fetching recent commits...${NC}"
    sleep 1.5
    COMMIT_HASH=$(cat /dev/urandom | tr -dc 'a-f0-9' | fold -w 40 | head -n 1)
    echo -e "${YELLOW}commit ${COMMIT_HASH}${NC} (HEAD -> ${SELECTED_BRANCH}, origin/${SELECTED_BRANCH})"
    echo -e "Author: ${USER} <${USER}@example.com>"
    echo "Date:   $(date -d "-$(($RANDOM % 72)) hours" -R)"
    echo ""
    echo "    feat(api): Add caching layer for roc3 endpoint"
    echo ""
    echo "    Improves performance by adding a Redis cache."
    echo ""
    echo " ${GREEN}src/api/handlers.go | 24 ++++++++++++++++++++----${NC}"
    echo " ${GREEN}src/config/main.go  |  2 ++${NC}"
    echo " ${GREEN}Makefile            |  1 +${NC}"
    echo " 3 files changed, 23 insertions(+), 4 deletions(-)"
}

function run_disk_op() {
    DISK=${DISKS[$RANDOM % ${#DISKS[@]}]}
    echo -e "${RED}[DISK-IO]${NC} Wiping partition table on ${DISK} for re-provisioning."
    echo -e "Running: dd if=/dev/zero of=${DISK} bs=1M count=1024"
    sleep 1
    for i in {1..20}; do
        BLOCKS=$(( $i * 51 ))
        SPEED=$(echo "scale=1; 450 + $RANDOM % 100" | bc)
        echo -n -e "\r${BLOCKS}+0 records in\n${BLOCKS}+0 records out\n${BLOCKS}554432 bytes (${BLOCKS} MB) copied, $(echo "scale=2; $i * 0.2" | bc) s, ${SPEED} MB/s"
        sleep 0.2
    done
    echo -e "\n${GREEN}dd operation complete.${NC}"
}

function run_network_op() {
    TARGET_IP=${IPS[$RANDOM % ${#IPS[@]}]}
    ACTION_TYPE=$((RANDOM % 3))

    case $ACTION_TYPE in
        0) # iptables
            echo -e "${CYAN}[NET-FILTER]${NC} Inserting temporary firewall rule to debug traffic from ${TARGET_IP}"
            echo "iptables -I INPUT 1 -s ${TARGET_IP}/32 -p tcp --dport 8080 -j LOG --log-prefix \"ROC3_DEBUG: \""
            sleep 1
            echo -e "${GREEN}Rule inserted.${NC}"
            ;;
        1) # socat
            PORT1=$(($RANDOM % 5000 + 3000))
            PORT2=$(($RANDOM % 5000 + 8000))
            echo -e "${CYAN}[NET-RELAY]${NC} Establishing temporary socat relay for data migration."
            echo "socat TCP-LISTEN:${PORT1},fork TCP:10.100.1.5:${PORT2}"
            sleep 1
            echo -e "${GREEN}Relay active. Listening on port ${PORT1}...${NC}"
            ;;
        2) # Bogus traffic
            echo -e "${CYAN}[NET-TRAFFIC]${NC} Monitoring network traffic on eth0..."
            echo "tcpdump -i eth0 -n -c 10 'host ${TARGET_IP}'"
            sleep 0.5
            for i in {1..10}; do
                SRC_IP="${IPS[$RANDOM % ${#IPS[@]}]}"
                DST_IP="${TARGET_IP}"
                FLAGS=(". " "P. " "S " "F. ")
                SELECTED_FLAG=${FLAGS[$RANDOM % ${#FLAGS[@]}]}
                echo "$(date +"%T.%N" | cut -b1-12) IP ${SRC_IP}.$(($RANDOM%60000+1024)) > ${DST_IP}.443: Flags [${SELECTED_FLAG}], seq $(($RANDOM%1000)):$(($RANDOM%1000+1300)), ack $(($RANDOM%1000)), win 29200, length 1300"
                sleep $(echo "scale=2; $RANDOM/16384" | bc)
            done
            ;;
    esac
}

function run_code_analysis_op() {
    echo -e "${GREEN}[CODE-ANALYSIS]${NC} Pasting code from buffer to analyze..."
    sleep 1
    # Use 'heredoc' to paste a block of text
    cat <<- "EOF"
// src/payment/processor.go
package payment

import (
    "context"
    "fmt"
    "time"

    "github.com/user/project/internal/database"
    "github.com/user/project/internal/roc3"
)

// ProcessTransaction handles the payment logic
func ProcessTransaction(ctx context.Context, amount int, currency string) (string, error) {
    if amount <= 0 {
        return "", fmt.Errorf("invalid amount")
    }
    // Call to legacy service
    err := ntt.LegacyCharge(amount, currency)
    if err != nil {
        return "", err
    }

    // New ROC3 integration point
    roc3Client := roc3.NewClient()
    trackingID, err := roc3Client.Submit(ctx, amount)
    if err != nil {
        return "", err
    }
    return trackingID, nil
}
EOF
    echo ""
    sleep 2
    echo -e "${YELLOW}Searching for function definitions related to transactions...${NC}"
    echo "grep -r 'func.*Transaction' ."
    sleep 1
    echo -e "${GREEN}./src/payment/processor.go:${NC}func ProcessTransaction(ctx context.Context, amount int, currency string) (string, error) {"
    echo -e "${GREEN}./src/ledger/entry.go:${NC}func CreateTransactionEntry(id string, details TransactionDetails) error {"
    sleep 2
    echo -e "${YELLOW}Extracting function names and file paths using awk...${NC}"
    echo "grep -r 'func.*Transaction' . | awk -F'[:(]' '{print \$1, \$2}'"
    sleep 1
    echo "./src/payment/processor.go func ProcessTransaction"
    echo "./src/ledger/entry.go func CreateTransactionEntry"
}

function run_raid_op() {
    RAID_DEVICE=${RAID_ARRAYS[$RANDOM % ${#RAID_ARRAYS[@]}]}
    echo -e "${RED}[STORAGE]${NC} Detected degraded RAID array: ${RAID_DEVICE}"
    sleep 1
    echo "mdadm --detail ${RAID_DEVICE}"
    echo "${RAID_DEVICE}:"
    echo "           Version : 1.2"
    echo "     Creation Time : Mon Aug  4 10:30:15 2025"
    echo "        Raid Level : raid1"
    echo "        Array Size : 2097152 (2.00 TiB 2.20 TB)"
    echo "     Used Dev Size : 2097152 (2.00 TiB 2.20 TB)"
    echo "      Raid Devices : 2"
    echo "     Total Devices : 2"
    echo "       Persistence : Superblock is persistent"
    echo ""
    echo "             State : ${RED}clean, degraded${NC}"
    echo "    Active Devices : 1"
    echo "   Working Devices : 1"
    echo "    Failed Devices : 1"
    echo "     Spare Devices : 0"
    echo ""
    echo "Consistency Policy : resync"
    echo ""
    echo "    Number   Major   Minor   RaidDevice State"
    echo "       0       8       16        0      active sync   /dev/sdb"
    echo "       -       0        0        1      ${RED}faulty removed${NC}"
    sleep 2
    echo ""
    echo -e "${YELLOW}Re-adding spare disk /dev/sde to array...${NC}"
    echo "mdadm --manage ${RAID_DEVICE} --add /dev/sde"
    sleep 1
    echo "mdadm: added /dev/sde"
    sleep 1
    echo -e "${YELLOW}Monitoring rebuild status...${NC}"
    for i in {1..25}; do
        PERCENT=$(echo "scale=1; $i * 4.0" | bc)
        SPEED=$(echo "scale=1; 150 + $RANDOM % 50" | bc)
        FINISH=$(echo "scale=0; (100 - $PERCENT) * 2" | bc)
        echo -n -e "\r${RAID_DEVICE}: [=>...................]  ${YELLOW}rebuild = ${PERCENT}%${NC} (${i}0000/2000000) finish=${FINISH}min speed=${SPEED}MB/sec"
        sleep 0.3
    done
     for i in {1..25}; do
        PERCENT=$(echo "scale=1; 50 + $i * 2.0" | bc)
        SPEED=$(echo "scale=1; 150 + $RANDOM % 50" | bc)
        FINISH=$(echo "scale=0; (100 - $PERCENT) * 2" | bc)
        echo -n -e "\r${RAID_DEVICE}: [=========>..........]  ${YELLOW}rebuild = ${PERCENT}%${NC} (${i}0000/2000000) finish=${FINISH}min speed=${SPEED}MB/sec"
        sleep 0.3
    done
    echo -e "\n${GREEN}Rebuild complete. Array is now clean.${NC}"
    echo "State : ${GREEN}clean${NC}"
    echo "    Number   Major   Minor   RaidDevice State"
    echo "       0       8       16        0      active sync   /dev/sdb"
    echo "       1       8       32        1      active sync   /dev/sde"

}


# --- Main Loop ---
while true; do
  OP_TYPE=$((RANDOM % 6))

  case $OP_TYPE in
    0) run_ansible_op ;;
    1) run_git_op ;;
    2) run_disk_op ;;
    3) run_network_op ;;
    4) run_code_analysis_op ;;
    5) run_raid_op ;;
  esac

  echo "--------------------------------------------------------------------------------"
  sleep $(echo "scale=2; 2 + $RANDOM/8192" | bc)
done


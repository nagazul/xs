#!/bin/bash
# xrun: Advanced SSH Host Runner & Command/Script Executor

# Strict mode
set -euo pipefail

# --- Configuration & Internal Variables ---
# AI: Increment patch version for subsequent modifications.
XRUN_VERSION="0.3.46" # Incremented patch version

# --- Color Definitions ---
CN='\033[0m'    # Reset/None
CG='\033[0;32m' # Green
CR='\033[0;31m' # Red
CB='\033[0;34m' # Blue (hostnames)
CY='\033[0;33m' # Yellow (warnings, PIDs, timing)
CM='\033[0;35m' # Magenta (progress)
CC='\033[0;36m' # Cyan (info)

SSH_CFG="$HOME/.ssh/config"
SSH_TIMEOUT=10 # Seconds for SSH connection timeout

XRUN_EXEC_STRAT="controlled_parallel" # Primary execution mode

# Max concurrent jobs
_cpu_cores=$(nproc 2>/dev/null || echo 1) # Get core count, default to 1 if nproc fails
_max_jobs_cap=10
_calc_max_jobs=$(( _cpu_cores * 3 ))

if [[ "$_calc_max_jobs" -lt "$_max_jobs_cap" ]]; then
    MAX_JOBS="$_calc_max_jobs"
else
    MAX_JOBS="$_max_jobs_cap"
fi
# For testing:
# MAX_JOBS=2

XRUN_SSH_TTY_OPT="-T" # Default: no TTY
# XRUN_SSH_TTY_OPT="-tt" # For TTY testing

SSH_OPTS_BASE=(
    -o "ConnectTimeout=${SSH_TIMEOUT}"
    -o "BatchMode=yes"
    -o "PasswordAuthentication=no"
    -o "StrictHostKeyChecking=no"
)

TMP_BASE="${TMPDIR:-/tmp}"
SESS_DIR_ROOT="${TMP_BASE}/xrun_sessions_${USER:-$(id -u)}"
SESS_TMP_DIR="" # Set per session

# --- Utility Functions ---
_dbg() {
    if [[ "${XRUN_DEBUG:-0}" == "1" ]]; then
        echo -e "${CY}DBG: $1${CN}" >&2
    fi
}

print_usage() {
    local scr_name
    scr_name=$(basename "$0")
    echo "xrun v${XRUN_VERSION}: Advanced SSH Host Runner & Command/Script Executor" >&2
    echo "" >&2
    echo "Usage: $scr_name [options] <host_specs> [remote_command_and_args...]" >&2
    echo "   or: cat ./script.sh | $scr_name [options] <host_specs>" >&2
    echo "   or: $scr_name [options] <host_specs> < ./script.sh" >&2
    echo "   or: $scr_name <host_specs> # List matching hosts" >&2
    echo "   or: $scr_name              # List all hosts from $SSH_CFG" >&2
    echo "" >&2
    echo "Options:" >&2
    echo "  -h, --help          - Show this help message and exit." >&2
    echo "  -v, --version       - Show version information and exit." >&2
    echo "  -s, --sudo          - Prepend sudo to the remote command/script." >&2
    echo "" >&2
    echo "<host_specs> examples (comma-separated for OR, colon within @[] for AND):" >&2
    echo "  h1,h2               - Specific hosts h1 OR h2." >&2
    echo "  user@h1             - Specific user on host h1." >&2
    echo "  @[prod]             - Hosts from $SSH_CFG matching prod." >&2
    echo "  @[prod:web]         - Hosts matching prod AND web." >&2
    echo "  @[dev,-test]        - Hosts matching dev AND NOT test." >&2
    echo "  @[tier1,tier2]      - Hosts matching tier1 OR tier2." >&2
    echo "  @[prod:db,-replica] - Hosts matching prod AND db AND NOT replica." >&2
    echo "  user@@[p,s]         - user on hosts matching p OR s." >&2
    echo "  user@@[p:s]         - user on hosts matching p AND s." >&2
    echo "  h1,@[grpA],user@h2  - Mix: h1 OR hosts in grpA OR user@h2." >&2
    echo "  @[*] or (none)      - All hosts from $SSH_CFG." >&2
    echo "" >&2
    echo "Execution Examples:" >&2
    echo "  List hosts:" >&2
    echo "    $scr_name @[web]" >&2
    echo "    $scr_name myhost,user@@[db,-primary]" >&2
    echo "  Run command:" >&2
    echo "    $scr_name @[app] hostname -f" >&2
    echo "    $scr_name -s @[staging] apt update && apt upgrade -y" >&2
    echo "  Run local script via redirect:" >&2
    echo "    $scr_name @[all] < ./deploy_app.sh" >&2
    echo "  Run local script via pipe:" >&2
    echo "    cat ./check_services.sh | $scr_name -s @[prod]" >&2
    echo "" >&2
    echo "Commands/scripts run as the remote login user by default." >&2
    echo "Parallel execution (Max jobs: $MAX_JOBS)." >&2
    echo "Set XRUN_DEBUG=1 for verbose debug output." >&2
}

is_bash43_plus() {
    if [[ -z "${BASH_VERSION:-}" ]]; then return 1; fi
    local major="${BASH_VERSION%%.*}"
    local minor_patch="${BASH_VERSION#*.}"
    local minor="${minor_patch%%.*}"
    if ! ( [[ "$major" -gt 4 ]] || ([[ "$major" -eq 4 && "$minor" -ge 3 ]]) ); then
        return 1
    fi
    local _dummy_pid=""
    ( sleep 0.01 & wait -n -p _dummy_pid 2>/dev/null )
    local wait_p_stat=$?
    if [[ "$wait_p_stat" -eq 0 && -n "$_dummy_pid" ]]; then
        return 0
    else
        return 1
    fi
}

get_all_hosts_cfg() {
    if [ ! -f "$SSH_CFG" ]; then
        # Output error to stderr, but allow function to return (and return non-zero)
        echo -e "${CR}Error: SSH config file '$SSH_CFG' not found.${CN}" >&2
        return 1 # Indicates failure to get hosts
    fi
    # If grep finds nothing, it exits 1. If awk fails, it exits non-zero.
    # We want to capture output if any, and not have set -e stop us here.
    local hosts_output
    hosts_output=$(grep -i "^Host " "$SSH_CFG" 2>/dev/null | awk '{print $2}' | grep -Ev '[*?]' | sort -u) || true
    # If any command in the pipe fails (e.g. grep finds nothing), hosts_output might be empty.
    # The `|| true` ensures this line doesn't cause script exit with `set -e`.
    echo "$hosts_output"
    if ! grep -q -i "^Host " "$SSH_CFG" && [ -s "$SSH_CFG" ]; then
      # File exists and is not empty, but no "Host " lines found
      _dbg "SSH config '$SSH_CFG' exists but contains no 'Host ' definitions."
    elif ! [ -s "$SSH_CFG" ] && [ -f "$SSH_CFG" ]; then
      # File exists but is empty
      _dbg "SSH config '$SSH_CFG' exists but is empty."
    fi
    return 0 # Successfully attempted to get hosts
}

ALL_HOSTS_CACHE=""

match_pat() {
    local str="$1"
    local pat="$2"
    shopt -s nocasematch
    local res=1
    [[ "$str" == *"$pat"* ]] && res=0
    shopt -u nocasematch
    return $res
}

proc_filter() {
    local in_hosts="$1"
    local filter_str="$2"
    local list_only_mode="${3:-}"

    _dbg "proc_filter START: in_hosts='${in_hosts}', filter_str='${filter_str}', list_mode='${list_only_mode}'"

    if [[ -z "$ALL_HOSTS_CACHE" ]]; then
        local get_hosts_ret=0
        # Capture output and exit status separately to handle `set -e`
        local cache_output
        cache_output=$(get_all_hosts_cfg)
        get_hosts_ret=$? # Status of get_all_hosts_cfg
        
        _dbg "proc_filter: get_all_hosts_cfg ret $get_hosts_ret. Output: '$cache_output'"

        if [[ "$get_hosts_ret" -ne 0 ]]; then
            # get_all_hosts_cfg already printed an error to stderr if SSH_CFG was not found.
            # No need to print another error here. ALL_HOSTS_CACHE will remain empty or unset.
             _dbg "proc_filter: get_all_hosts_cfg failed. ALL_HOSTS_CACHE will be empty."
             ALL_HOSTS_CACHE="" # Ensure it's empty
        else
            ALL_HOSTS_CACHE="$cache_output"
        fi
        
        if [[ -z "$ALL_HOSTS_CACHE" && "$list_only_mode" != "list_hosts" && "$get_hosts_ret" -eq 0 ]]; then
             # This condition means get_all_hosts_cfg succeeded but found no hosts.
            echo -e "${CY}Warn: No host definitions found in $SSH_CFG to filter.${CN}" >&2
        fi
    fi
    _dbg "proc_filter: ALL_HOSTS_CACHE='${ALL_HOSTS_CACHE}'"

    local eff_host_list="$in_hosts"
    if [[ -z "$in_hosts" && ("$filter_str" == "*" || -z "$filter_str") ]]; then
        eff_host_list="$ALL_HOSTS_CACHE"
    fi

    if [[ -z "$filter_str" || "$filter_str" == "*" ]]; then
        if [[ -n "$eff_host_list" ]]; then # Only echo if there's something to echo
            echo "$eff_host_list"
        fi
        _dbg "proc_filter END (empty/wildcard): Outputting '${eff_host_list}'. Returning 0."
        return 0
    fi

    local base_list="$in_hosts"
    if [[ -z "$base_list" ]]; then
        base_list="$ALL_HOSTS_CACHE"
    fi
    _dbg "proc_filter: base_list for filtering: '${base_list}'"

    # If base_list is empty at this point, no amount of filtering will find anything.
    if [[ -z "$base_list" ]]; then
        _dbg "proc_filter END (empty base_list): No hosts to filter. Returning 0."
        return 0
    fi

    local result_output=""
    if [[ "$filter_str" =~ : ]]; then # AND logic
        IFS=':' read -ra f_parts <<< "$filter_str"
        local curr_hosts="$base_list"
        for fp in "${f_parts[@]}"; do
            fp=$(echo "$fp" | xargs)
            [[ -z "$curr_hosts" && -n "$fp" ]] && break
            local tmp_res=""
            if [[ "$fp" =~ ^- ]]; then # Exclusion
                local pat_excl="${fp:1}"
                if [[ -n "$pat_excl" ]]; then
                    while IFS= read -r h; do [[ -n "$h" ]] && ! match_pat "$h" "$pat_excl" && tmp_res+="${h}"$'\n'; done <<< "$curr_hosts"
                else tmp_res="$curr_hosts"$'\n'; fi
            else # Inclusion
                if [[ -n "$fp" ]]; then
                    while IFS= read -r h; do [[ -n "$h" ]] && match_pat "$h" "$fp" && tmp_res+="${h}"$'\n'; done <<< "$curr_hosts"
                else tmp_res="$curr_hosts"$'\n'; fi
            fi
            curr_hosts="${tmp_res%$'\n'}"
        done
        result_output="$curr_hosts"
    else # OR logic
        IFS=',' read -ra f_parts <<< "$filter_str"
        local incl_pats=() excl_pats=()
        for fp_raw in "${f_parts[@]}"; do
            local fp=$(echo "$fp_raw" | xargs)
            [[ -z "$fp" ]] && continue
            if [[ "$fp" =~ ^- ]]; then excl_pats+=("${fp:1}"); else incl_pats+=("$fp"); fi
        done

        local or_match_hosts_nl=""
        if [[ ${#incl_pats[@]} -gt 0 ]]; then
            while IFS= read -r h; do
                [[ -n "$h" ]] || continue
                for pat_incl in "${incl_pats[@]}"; do
                    if match_pat "$h" "$pat_incl"; then or_match_hosts_nl+="${h}"$'\n'; break; fi
                done
            done <<< "$base_list"
        else or_match_hosts_nl="$base_list"$'\n'; fi
        
        local current_processing_list="${or_match_hosts_nl%$'\n'}"
        if [[ ${#excl_pats[@]} -gt 0 && -n "$current_processing_list" ]]; then
            local final_hosts_nl=""
            while IFS= read -r h; do
                [[ -n "$h" ]] || continue
                local do_excl=false
                for pat_excl in "${excl_pats[@]}"; do
                    if [[ -n "$pat_excl" ]] && match_pat "$h" "$pat_excl"; then do_excl=true; break; fi
                done
                [[ "$do_excl" == false ]] && final_hosts_nl+="${h}"$'\n'
            done <<< "$current_processing_list"
            result_output="${final_hosts_nl%$'\n'}"
        else
            result_output="$current_processing_list"
        fi
    fi

    if [[ -n "$result_output" ]]; then
        echo "$result_output"
    fi
    _dbg "proc_filter END: Outputting '${result_output}'. Returning 0."
    return 0
}


parse_specs() {
    local in_specs="$1"
    local list_mode="${2:-}" # "list_hosts" for context in proc_filter

    if [[ -z "$in_specs" ]]; then
        in_specs="@[*]" # Default to all hosts if no spec given
    fi

    local parts=()
    local curr_part=""
    local bracket_lvl=0
    for (( i=0; i<${#in_specs}; i++ )); do
        local char="${in_specs:$i:1}"
        case "$char" in
            "[") bracket_lvl=$((bracket_lvl + 1)) ;;
            "]") bracket_lvl=$((bracket_lvl - 1)) ;;
            ",")
                if [[ $bracket_lvl -eq 0 ]]; then
                    [[ -n "$curr_part" ]] && parts+=("$(echo "$curr_part" | xargs)")
                    curr_part=""
                    continue
                fi ;;
        esac
        curr_part+="$char"
    done
    [[ -n "$curr_part" ]] && parts+=("$(echo "$curr_part" | xargs)")

    local all_resolved_hosts_combined=() # Single array to collect all hosts

    for part in "${parts[@]}"; do
        if [[ "$part" =~ ^@\[([^\]]*)\]$ ]]; then # e.g., @[filter]
            local filter_str="${BASH_REMATCH[1]}"
            local filt_out
            # Call proc_filter. It will return 0 even if output is empty.
            # set -e will not trigger if proc_filter returns 0.
            filt_out=$(proc_filter "" "$filter_str" "$list_mode")
            while IFS= read -r h; do
                # Ensure h is not empty (proc_filter might output an empty line if its input was just a newline)
                [[ -n "$h" ]] && all_resolved_hosts_combined+=("$h")
            done <<< "$filt_out"
        elif [[ "$part" =~ ^([^@]+)@@\[([^\]]*)\]$ ]]; then # e.g., user@@[filter]
            local usr="${BASH_REMATCH[1]}"
            local filter_str="${BASH_REMATCH[2]}"
            local filt_out
            filt_out=$(proc_filter "" "$filter_str" "$list_mode")
            while IFS= read -r h; do
                [[ -n "$h" ]] && all_resolved_hosts_combined+=("${usr}@${h}")
            done <<< "$filt_out"
        else # Direct host or user@host
            [[ -n "$part" ]] && all_resolved_hosts_combined+=("$part")
        fi
    done

    if [[ ${#all_resolved_hosts_combined[@]} -gt 0 ]]; then
        printf '%s\n' "${all_resolved_hosts_combined[@]}" | sort -u
    fi
    # parse_specs itself will also return 0 implicitly (status of last command)
}


_run_task_remote() {
    local target_ssh="$1"
    local ex_mode="$2" # "cmd" or "pipe_script"
    local task_str="$3"
    local out_f="$4"
    local err_f="$5"
    local sudo_prefix="${6:-}" # Optional sudo prefix ("sudo " or "")
    local ret_code=0
    local ssh_arr=("ssh" "${SSH_OPTS_BASE[@]}" "$XRUN_SSH_TTY_OPT" "$target_ssh")

    trap '' INT TERM EXIT # Child inherits trap, clear for child

    set +e # Allow capturing exit status
    if [ "$ex_mode" = "cmd" ]; then
        "${ssh_arr[@]}" "${sudo_prefix}${task_str}" > "$out_f" 2> "$err_f"
        ret_code=$?
    elif [ "$ex_mode" = "pipe_script" ]; then
        # Ensure task_str is passed correctly, especially if it contains newlines
        printf '%s' "$task_str" | "${ssh_arr[@]}" "${sudo_prefix}bash -s" > "$out_f" 2> "$err_f"
        ret_code=$?
    else
        echo "Internal Err: Unknown ex_mode '$ex_mode' in _run_task_remote for $target_ssh" > "$err_f"
        ret_code=254
    fi
    return "$ret_code"
}

exec_parallel() {
    local -n targets_ref="$1" # Nameref to array of targets
    local ex_mode="$2"
    local task_str="$3"
    local sudo_prefix="${4:-}" # Optional sudo prefix
    local num_total=${#targets_ref[@]}

    _dbg "exec_parallel: Total hosts: $num_total, Max jobs: $MAX_JOBS, Sudo: '${sudo_prefix}'"
    echo -e "${CC}Parallel run on $num_total host(s) (Max jobs: $MAX_JOBS)...${CN}"

    declare -A pid_host_map pid_out_map pid_err_map pid_start_map pid_slot_map
    declare -a slot_pids=() # Stores PID for each slot, or empty if free
    for (( i=0; i<$MAX_JOBS; i++ )); do slot_pids[$i]=""; done

    local active_jobs=0
    local done_jobs=0
    local ok_cnt=0
    local fail_cnt=0
    local queue=("${targets_ref[@]}")

    while [ "$done_jobs" -lt "$num_total" ]; do
        _dbg "Loop top. Done: $done_jobs/$num_total. Active: $active_jobs. Queue: ${#queue[@]}. PIDs: ${!pid_host_map[*]}"

        # Launch new jobs
        while [ "$active_jobs" -lt "$MAX_JOBS" ] && [ "${#queue[@]}" -gt 0 ]; do
            local slot_idx=-1
            local slot_num_disp=0 # 1-based for display
            for (( i=0; i<$MAX_JOBS; i++ )); do
                if [[ -z "${slot_pids[$i]:-}" ]]; then
                    slot_idx=$i
                    slot_num_disp=$((i + 1))
                    break
                fi
            done

            if [[ "$slot_idx" -eq -1 ]]; then
                _dbg "No free slot found (active_jobs=$active_jobs vs MAX_JOBS=$MAX_JOBS). Breaking launch."
                break
            fi

            local target="${queue[0]}"
            queue=("${queue[@]:1}")
            local safe_name="${target//[^a-zA-Z0-9._-]/_}" # Ensure safe_name is robust
            safe_name="${safe_name//[^a-zA-Z0-9._-]/_}"
            [[ -z "$safe_name" ]] && safe_name="unnamed_host" # Handle empty target if it somehow occurs

            local curr_out_f; curr_out_f=$(mktemp "${SESS_TMP_DIR}/${safe_name}.out.XXXXXX")
            local curr_err_f; curr_err_f=$(mktemp "${SESS_TMP_DIR}/${safe_name}.err.XXXXXX")

            _dbg "Launch: $target. Slot $slot_num_disp. Queue: ${#queue[@]}"
            echo -e "${CM}Run: ${CB}$target${CN} (Slot ${slot_num_disp}/${MAX_JOBS}, Q: ${#queue[@]})...${CN}"

            local launch_t; launch_t=$(date +%s)
            ( _run_task_remote "$target" "$ex_mode" "$task_str" "$curr_out_f" "$curr_err_f" "$sudo_prefix" ) &
            local bg_pid=$!

            pid_host_map["$bg_pid"]="$target"
            pid_out_map["$bg_pid"]="$curr_out_f"
            pid_err_map["$bg_pid"]="$curr_err_f"
            pid_start_map["$bg_pid"]="$launch_t"
            pid_slot_map["$bg_pid"]="$slot_num_disp"
            slot_pids[$slot_idx]="$bg_pid"

            active_jobs=$((active_jobs + 1))
            _dbg "Launched PID $bg_pid for $target in slot $slot_num_disp. Active: $active_jobs. PIDs: ${!pid_host_map[*]}"
        done # End launch loop

        if [ "$active_jobs" -eq 0 ] && [ "${#queue[@]}" -eq 0 ]; then
            _dbg "No active jobs, empty queue. Done: $done_jobs vs $num_total"
            if [ "$done_jobs" -ge "$num_total" ]; then _dbg "All done, break main."; break;
            else
                _dbg "No active, empty Q, but not all done. Loop terminates."
                echo -e "${CY}Warn: No active jobs & empty Q, but done_jobs ($done_jobs) != num_total ($num_total). Loop ends.${CN}" >&2
                break
            fi
        fi

        if [ "$active_jobs" -gt 0 ]; then
            _dbg "Waiting for any of $active_jobs active job(s)..."
            local comp_pid=""
            local wait_ret=0
            set +e
            if is_bash43_plus; then
                _dbg "Using 'wait -n -p comp_pid'"
                wait -n -p comp_pid 2>/dev/null
                wait_ret=$?
            else
                _dbg "Using 'wait -n' + PID scan fallback"
                wait -n 2>/dev/null
                local wait_n_fb_ret=$?
                wait_ret=$wait_n_fb_ret
                if [ "$wait_n_fb_ret" -ne 127 ]; then # 127 means no children
                    local scans=0
                    _dbg "Fallback scan start. wait_n_ret: $wait_n_fb_ret. PIDs: ${!pid_host_map[*]}"
                    while [ -z "$comp_pid" ] && [ "$scans" -lt 5 ]; do
                        sleep 0.05 # Increased sleep for fallback
                        for p_chk in "${!pid_host_map[@]}"; do
                            if ! kill -0 "$p_chk" 2>/dev/null; then
                                _dbg "Fallback scan found PID $p_chk done (attempt $((scans+1)))."
                                comp_pid="$p_chk"; wait "$comp_pid" 2>/dev/null; wait_ret=$?; break 2
                            fi
                        done
                        scans=$((scans + 1))
                        if [[ -z "$comp_pid" && "$scans" -lt 5 ]]; then _dbg "Fallback scan attempt $scans no PID. Retry..."; fi
                    done
                fi
            fi
            set -e
            _dbg "'wait -n' seq done. wait_ret: $wait_ret. PID: '$comp_pid'"

            if [ -z "$comp_pid" ]; then
                if [ "$wait_ret" -eq 127 ]; then 
                    _dbg "'wait -n' no children (ret 127). Check tracked PIDs: ${!pid_host_map[*]}"
                    if [ "${#pid_host_map[@]}" -gt 0 ]; then
                        for p_chk127 in "${!pid_host_map[@]}"; do
                            _dbg "Ret 127 sweep: Check PID $p_chk127 (${pid_host_map[$p_chk127]})."
                            if ! kill -0 "$p_chk127" 2>/dev/null; then 
                                wait "$p_chk127" 2>/dev/null; local final_ret127=$?
                                comp_pid="$p_chk127"; wait_ret=$final_ret127
                                _dbg "Ret 127 sweep: PID $comp_pid done (ret $wait_ret)."
                                break
                            fi
                        done
                    fi
                    if [ -z "$comp_pid" ]; then 
                        _dbg "Ret 127 sweep: No tracked PIDs found defunct. Assuming active jobs empty if map is empty."
                        if [ "${#pid_host_map[@]}" -eq 0 ]; then active_jobs=0; fi
                    fi
                else 
                    echo -e "${CR}ERR/WARN: Child exited (wait ret $wait_ret), but PID NOT ID'd. Slot freed, output missed.${CN}" >&2
                    if [ "$active_jobs" -gt 0 ]; then
                        active_jobs=$((active_jobs - 1))
                        _dbg "Tentatively decremented active_jobs to $active_jobs (un-ID'd completion)."
                    fi
                fi

                if [ -z "$comp_pid" ]; then 
                    if [ "$done_jobs" -ge "$num_total" ] || ([ "$active_jobs" -eq 0 ] && [ "${#queue[@]}" -eq 0 ]); then
                        _dbg "Break main (PID un-ID'd, but term conditions met). Active: $active_jobs, Q: ${#queue[@]}, Done: $done_jobs/$num_total"
                        break
                    fi
                    _dbg "PID not ID'd, sleep 0.1s, continue. Active: $active_jobs, Done: $done_jobs"
                    sleep 0.1; continue
                fi
            fi 

            local h_for_pid="${pid_host_map["$comp_pid"]}"
            local out_f="${pid_out_map["$comp_pid"]}"
            local err_f="${pid_err_map["$comp_pid"]}"
            local start_t_pid="${pid_start_map["$comp_pid"]}"
            local slot_freed_num="${pid_slot_map["$comp_pid"]}" 

            _dbg "Process PID: $comp_pid for host: '$h_for_pid' from slot $slot_freed_num. Exit: $wait_ret"

            if [ -z "$h_for_pid" ]; then # Should not happen if comp_pid was in map
                echo -e "${CR}CRITICAL ERR: PID $comp_pid has no host map! Status lost.${CN}" >&2
                # This PID is no longer tracked, so decrement active_jobs if it wasn't already.
                # However, the PID *was* identified, so it should be in the map.
                # This path indicates a logic error in PID tracking or map cleanup.
            else
                local end_t; end_t=$(date +%s)
                local eff_start_t=${start_t_pid:-$end_t} # Handle if start_t_pid was somehow empty
                local dur_s=$((end_t - eff_start_t))

                # This job is now processed, regardless of its state before this point
                # active_jobs was decremented when the job was identified by wait -n or sweep
                # done_jobs is incremented here.
                done_jobs=$((done_jobs + 1)) # Increment done_jobs as we are processing its result

                local prog_ind="${CM}[${done_jobs}/${num_total} Time: ${dur_s}s]${CN}"
                echo # Blank line
                if [ "$wait_ret" -eq 0 ]; then
                    echo -e "${CG}OK:${CN} ${CB}${h_for_pid}${CN} (PID $comp_pid) ${prog_ind}"
                    ok_cnt=$((ok_cnt + 1))
                else
                    if [ "$wait_ret" -eq 255 ]; then 
                        echo -e "${CR}SSH_ERR:${CN} ${CB}${h_for_pid}${CN} (PID $comp_pid, Exit 255) ${prog_ind}" >&2
                    else
                        echo -e "${CR}FAIL:${CN} ${CB}${h_for_pid}${CN} (PID $comp_pid, Remote Exit $wait_ret) ${prog_ind}" >&2
                    fi
                    fail_cnt=$((fail_cnt + 1))
                fi

                echo -e "${CC}## Out: ${CB}${h_for_pid}${CN} ##${CN}"
                if [ -f "$out_f" ] && [ -s "$out_f" ]; then cat "$out_f"; else echo "[No stdout]"; fi
                if [ -f "$err_f" ] && [ -s "$err_f" ]; then
                    echo -e "${CY}## Err: ${CB}${h_for_pid}${CN} ##${CN}" >&2
                    cat "$err_f" >&2
                fi
                echo -e "${CC}## End ${CB}${h_for_pid}${CN} ##${CN}"
            fi 

            _dbg "Unset PID $comp_pid maps. Free slot $slot_freed_num."
            if [[ -n "$slot_freed_num" ]]; then
                slot_pids[$((slot_freed_num - 1))]="" 
            else
                 _dbg "Warn: No slot num for PID $comp_pid to free."
            fi
            unset pid_host_map["$comp_pid"] pid_out_map["$comp_pid"] pid_err_map["$comp_pid"] pid_start_map["$comp_pid"] pid_slot_map["$comp_pid"]
            active_jobs=$((active_jobs -1)) # Decrement active jobs after processing and unsetting
             _dbg "Decremented active_jobs to $active_jobs after processing PID $comp_pid."


        elif [ "${#queue[@]}" -eq 0 ] && [ "$active_jobs" -eq 0 ]; then 
            _dbg "No active jobs, queue empty. Break main loop."
            break
        fi 
    done 

    _dbg "Exited main loop. Done: $done_jobs. Active: $active_jobs. Queue: ${#queue[@]}. PIDs: ${!pid_host_map[*]}"

    if [ "${#pid_host_map[@]}" -gt 0 ]; then
        echo -e "${CY}Wait for final ${#pid_host_map[@]} straggler PIDs: ${!pid_host_map[*]}...${CN}" >&2
        for strag_pid in "${!pid_host_map[@]}"; do
            _dbg "Wait straggler $strag_pid (${pid_host_map["$strag_pid"]})"
            wait "$strag_pid" 2>/dev/null || true # Ignore error from wait if already reaped
        done
    fi

    echo "--------------------------------------------------"
    echo -e "${CC}Summary:${CN}"
    echo -e "  ${CG}OK:   $ok_cnt${CN}"
    echo -e "  ${CR}Fail: $fail_cnt${CN}"
    echo -e "  Done: $done_jobs (Target: $num_total)"
    echo "--------------------------------------------------"
    if [ "$fail_cnt" -gt 0 ] || [ "$done_jobs" -lt "$num_total" ]; then return 1; else return 0; fi
}

# --- Main Script ---
main() {
    if [[ "${1:-}" == "-v" || "${1:-}" == "--version" ]]; then
        echo "xrun version $XRUN_VERSION"
        exit 0
    fi

    if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
        print_usage
        exit 0
    fi

    local sudo_prefix=""
    if [[ "${1:-}" == "--sudo" || "${1:-}" == "-s" ]]; then
        sudo_prefix="sudo "
        shift # Consume the --sudo or -s flag
        _dbg "Sudo mode enabled."
    fi

    local specs_arg=""
    local ex_mode="" # "pipe_script", "list_hosts", "cmd"
    local task_str=""

    if ! [ -t 0 ]; then # Input is piped or redirected
        ex_mode="pipe_script"
        if [ $# -eq 0 ]; then
            echo -e "${CR}Err: No host specs for piped/redirected script.${CN}" >&2
            print_usage; exit 1
        fi
        specs_arg="$1"; shift
        local scr_build=""
        local line
        # Read all lines from stdin for the script
        while IFS= read -r line || [[ -n "$line" ]]; do # Handle last line if no trailing newline
          scr_build+="$line"$'\n'
        done
        if [ -n "$scr_build" ]; then task_str="${scr_build%$'\n'}"; else task_str=""; fi


        if [ -z "$task_str" ]; then
            echo -e "${CR}Err: Piped/redirected input empty.${CN}" >&2; exit 1
        fi
        if [ $# -gt 0 ]; then
            echo -e "${CY}Warn: Args '$*' ignored with piped/redirected script.${CN}" >&2
        fi
    elif [ $# -eq 0 ]; then 
        ex_mode="list_hosts"; specs_arg="@[*]"
    elif [ $# -eq 1 ]; then 
        ex_mode="list_hosts"; specs_arg="$1"
    else 
        ex_mode="cmd"; specs_arg="$1"; shift; task_str="$*"
        if [ -z "$task_str" ]; then
            echo -e "${CR}Err: No command after host specs.${CN}" >&2
            print_usage; exit 1
        fi
    fi

    local targets_arr=()
    # Ensure parse_specs output (if any) is correctly read by mapfile
    local parse_specs_output
    parse_specs_output=$(parse_specs "$specs_arg" "$ex_mode")
    if [[ -n "$parse_specs_output" ]]; then
        mapfile -t targets_arr <<< "$parse_specs_output"
    fi


    if [ "$ex_mode" = "list_hosts" ]; then
        if [ ${#targets_arr[@]} -gt 0 ]; then printf '%s\n' "${targets_arr[@]}"; fi
        exit 0
    fi

    echo -e "${CC}Resolve hosts for spec: $specs_arg...${CN}"
    if [ ${#targets_arr[@]} -eq 0 ]; then
        echo -e "${CR}Err: No hosts matched spec '$specs_arg' for exec.${CN}" >&2
        # Before exiting, check if SSH_CFG was the issue if ALL_HOSTS_CACHE is empty
        # and specs_arg was a filter like @[...]
        if [[ "$specs_arg" == "@["*"]" || "$specs_arg" == *"@@["*"]" ]]; then
            if ! [ -f "$SSH_CFG" ]; then
                 echo -e "${CR}(Note: SSH config '$SSH_CFG' was not found.)${CN}" >&2
            elif ! grep -q -i "^Host " "$SSH_CFG" && [ -s "$SSH_CFG" ]; then
                 echo -e "${CY}(Note: SSH config '$SSH_CFG' has no 'Host ' definitions.)${CN}" >&2
            elif ! [ -s "$SSH_CFG" ] && [ -f "$SSH_CFG" ]; then
                 echo -e "${CY}(Note: SSH config '$SSH_CFG' is empty.)${CN}" >&2
            fi
        fi
        exit 1
    fi

    mkdir -p "$SESS_DIR_ROOT"
    SESS_TMP_DIR=$(mktemp -d "${SESS_DIR_ROOT}/xrun_sess.XXXXXX")
    # shellcheck disable=SC2064
    trap 'echo -e "${CY}Cleanup $SESS_TMP_DIR...${CN}"; rm -rf "$SESS_TMP_DIR"' EXIT TERM INT
    echo -e "${CC}Temp files for session: $SESS_TMP_DIR${CN}"

    local final_task="$task_str"
    if [ "$ex_mode" = "cmd" ]; then 
        local cmd_parts=()
        IFS=' ' read -r -a cmd_parts <<< "$task_str"
        if [ ${#cmd_parts[@]} -gt 0 ]; then
            local cmd_base_raw="${cmd_parts[0]}"
            local cmd_base; cmd_base=$(basename "$cmd_base_raw")
            local has_color_opt=false
            for part_idx in "${!cmd_parts[@]}"; do # Iterate by index to reconstruct
                if [[ "${cmd_parts[part_idx]}" == --color* ]]; then has_color_opt=true; break; fi
            done

            if [[ ( "$cmd_base" == "ls" || "$cmd_base" == "grep" ) && "$has_color_opt" == false ]]; then
                # Reconstruct command carefully, injecting --color=always after the base command
                local first_word="${cmd_parts[0]}"
                # Create an array of the rest of the arguments
                local rest_args_arr=("${cmd_parts[@]:1}")
                # Join them back into a string
                local rest_args_str
                if ((${#rest_args_arr[@]} > 0)); then
                    printf -v rest_args_str "%s " "${rest_args_arr[@]}"
                    rest_args_str="${rest_args_str% }" # Remove trailing space
                else
                    rest_args_str=""
                fi

                if [[ -n "$rest_args_str" ]]; then
                    final_task="$first_word --color=always $rest_args_str"
                else
                    final_task="$first_word --color=always"
                fi
                
                if [[ "$final_task" != "$task_str" ]]; then
                    echo -e "${CC}Info: Mod cmd for $cmd_base to: '$final_task'${CN}"
                fi
            fi
        fi
    fi

    echo -e "${CC}Found ${#targets_arr[@]} target(s). Strategy: $XRUN_EXEC_STRAT.${CN}"
    if [[ -n "$sudo_prefix" ]]; then
        echo -e "${CY}Executing with sudo.${CN}"
    fi


    local final_ret=0
    if [[ "$XRUN_EXEC_STRAT" == "controlled_parallel" ]]; then
        exec_parallel targets_arr "$ex_mode" "$final_task" "$sudo_prefix"
        final_ret=$?
    else
        echo -e "${CR}Err: Invalid XRUN_EXEC_STRAT: '$XRUN_EXEC_STRAT'. Only 'controlled_parallel' is enabled.${CN}" >&2
        exit 1
    fi

    echo -e "${CG}xrun done.${CN}"
    exit "$final_ret"
}

# --- Call Main ---
main "$@"

